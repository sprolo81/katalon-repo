{"version":3,"file":"static/js/556.ea09c5e3.chunk.js","mappings":"8PAIMA,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,KAAM,CACJC,SAAU,QACVC,MAAO,OACPC,OAAQ,OACRC,IAAK,IACLC,KAAM,IACNC,WAAY,QAEdC,IAAK,CACHL,MAAO,OACPC,OAAQ,OACRG,WACE,oFAKAE,EAAY,CAChBC,MACE,2EACFC,MAAO,WACPC,MAAO,gCACPC,MAAO,OAGHC,EAAiB,SAACC,EAAMC,EAASC,GACrC,OAAQF,GACN,KAAKN,EAAUC,MACb,OACE,gBACEQ,MAAO,CAAEC,gBAAgB,OAAD,QChCTC,EDgC2BH,EC9BvC,qBADDG,EAEOC,GAEA,yBD2BqC,MAC9CC,UAAWN,EAAQR,MAGzB,KAAKC,EAAUE,MACb,OACE,kBAAOY,IAAKN,EAAI,UACd,kBACEO,SAAO,EACPC,KAAK,WACLC,QAAQ,KACRH,IAAI,kCAIZ,KAAKd,EAAUG,MACb,OACE,kBAAOW,IAAKN,EAAI,UACd,kBACEO,SAAO,EACPC,KAAK,WACLC,QAAQ,KACRH,IAAI,iCAIZ,KAAKd,EAAUI,MACb,OAAO,gBAAKU,IAAKN,EAAKU,IAAI,GAAGL,UAAWN,EAAQR,MAClD,QACE,OC7DkB,IAACY,CD+DzB,EASe,SAASQ,IACtB,IAAMZ,EAAUjB,IAGVqB,EADM,IAAIS,IAAIC,OAAOC,SAASC,MACfC,aAAaC,IAAI,OAChCC,EAZgB,WAAe,IAAdlB,EAAG,uDAAG,GACvBkB,EAAkBC,OAAOC,OAAO5B,GAAW6B,MAAK,SAACC,GAAO,OAC5DA,EAAQC,KAAKvB,EAAI,IAEnB,OAA0B,MAAnBkB,EAA0BA,EAAkB1B,EAAUC,KAC/D,CAO0B+B,CAAgBrB,GAExC,OACE,gBAAKE,UAAWN,EAAQf,KAAK,SAC1Ba,EAAeqB,EAAiBnB,EAASI,IAGhD,C","sources":["client/pages/multi-media/MultiMediaPage.jsx","client/pages/multi-media/components/ImageGetter.js"],"sourcesContent":["import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { getImage } from \"./components/ImageGetter\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    position: \"fixed\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    background: \"#fff\",\r\n  },\r\n  img: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    background:\r\n      \"url(../../../assets/img/quick-record-web.gifz) center center/contain no-repeat\",\r\n  },\r\n});\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types\r\nconst MediaType = {\r\n  Image:\r\n    /\\.(png|apng|gif|svg|webp|tif|tiff|bmp|ico|cur|avif|jpg|jpeg|jfif|pjpeg)/i,\r\n  Audio: /\\.(mp3)/i,\r\n  Video: /\\.(mp4|webm|ogv|ogm|ogg|avi)/i,\r\n  Embed: /.*/i,\r\n};\r\n\r\nconst mediaRenderers = (type, classes, url) => {\r\n  switch (type) {\r\n    case MediaType.Image:\r\n      return (\r\n        <div\r\n          style={{ backgroundImage: `url(${getImage(url)})` }}\r\n          className={classes.img}\r\n        />\r\n      );\r\n    case MediaType.Audio:\r\n      return (\r\n        <audio src={url}>\r\n          <track\r\n            default\r\n            kind=\"captions\"\r\n            srcLang=\"en\"\r\n            src=\"/media/examples/friday.vttz\"\r\n          />\r\n        </audio>\r\n      );\r\n    case MediaType.Video:\r\n      return (\r\n        <video src={url}>\r\n          <track\r\n            default\r\n            kind=\"captions\"\r\n            srcLang=\"en\"\r\n            src=\"/media/examples/friday.vtt\"\r\n          />\r\n        </video>\r\n      );\r\n    case MediaType.Embed:\r\n      return <img src={url} alt=\"\" className={classes.img} />;\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst detectMediaType = (url = \"\") => {\r\n  const detectedPattern = Object.values(MediaType).find((pattern) =>\r\n    pattern.test(url)\r\n  );\r\n  return detectedPattern != null ? detectedPattern : MediaType.Image;\r\n};\r\n\r\nexport default function MultiMediaPage() {\r\n  const classes = useStyles();\r\n\r\n  const url = new URL(window.location.href);\r\n  const mediaUrl = url.searchParams.get(\"url\");\r\n  const detectedPattern = detectMediaType(mediaUrl);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {mediaRenderers(detectedPattern, classes, mediaUrl)}\r\n    </div>\r\n  );\r\n}\r\n","\r\nimport WebRecorderGif from '../../../../assets/img/web-recorder.gif';\r\n\r\nexport const getImage = (mediaUrl) => {\r\n    switch (mediaUrl) {\r\n        case 'web-recorder.gif':\r\n            return WebRecorderGif;\r\n        default:\r\n            return <></>\r\n    }\r\n\r\n}"],"names":["useStyles","makeStyles","root","position","width","height","top","left","background","img","MediaType","Image","Audio","Video","Embed","mediaRenderers","type","classes","url","style","backgroundImage","mediaUrl","WebRecorderGif","className","src","default","kind","srcLang","alt","MultiMediaPage","URL","window","location","href","searchParams","get","detectedPattern","Object","values","find","pattern","test","detectMediaType"],"sourceRoot":""}